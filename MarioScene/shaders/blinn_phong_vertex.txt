#version 120

attribute vec3 vertexPos;
attribute vec2 vertexTexCoord;
attribute vec3 vertexNormal;


uniform int time;
uniform int transitionFrames;
uniform float initialSize;
uniform float finalSize;


uniform mat4 model;
uniform mat4 view;
uniform mat4 projection;

varying vec2 fragmentTexCoord;
varying vec3 fragmentPosition;
varying vec3 fragmentNormal;

void main()
{
    vec3 scaledPosition;

    if (mod((time + transitionFrames)/ transitionFrames, 2) == 0) { 
        scaledPosition= vec3(
            vertexPos.x,
            vertexPos.y,
            vertexPos.z * finalSize + 0.1
        );
    } else {
        scaledPosition = vec3(
            vertexPos.x,
            vertexPos.y ,
            vertexPos.z * initialSize
        );
    }


    gl_Position = projection * view * model * vec4(scaledPosition, 1.0);
    fragmentTexCoord = vertexTexCoord;
    fragmentPosition = (model * vec4(scaledPosition, 1.0)).xyz;
    fragmentNormal = mat3(model) * vertexNormal;
}
